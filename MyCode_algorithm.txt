//二叉树寻找每层最大值(BFS广度遍历)
import org.junit.jupiter.api.Test;

import java.util.*;

class TreeNode{
    int val;
    TreeNode left;
    TreeNode right;
    public TreeNode(){}
    public TreeNode(int x){
        val = x;
        left = null;
        right = null;
    }
}

public class BFS {
    public List<Integer> largestValue(TreeNode root){
        List<Integer> res = new ArrayList<>();
        Queue<TreeNode> queue = new LinkedList<>();
        if (root == null) return res;

        queue.add(root);
        while (!queue.isEmpty()){
            int tmpQueueSize = queue.size(), max = Integer.MIN_VALUE;
            for (int i = 0; i < tmpQueueSize; i++) {
                TreeNode tmp = queue.poll();
                if (tmp.val > max) max = tmp.val;
                if (tmp.left != null) queue.add(tmp.left);
                if (tmp.right != null) queue.add(tmp.right);
            }
            res.add(max);
        }

        return res;
    }
    @Test
    public void Test1() {
        TreeNode root = new TreeNode(1);
        TreeNode n1 = new TreeNode(4);
        TreeNode n2 = new TreeNode(2);
        TreeNode n3 = new TreeNode(6);
        TreeNode n4 = new TreeNode(9);
        TreeNode n5 = new TreeNode(1);
        root.left = n1;
        root.right = n2;
        n1.left = n3;
        n1.right = n4;
        n2.right =n5;
        List<Integer> list = largestValue(root);
        for (Integer l:
             list) {
            System.out.println(l);
        }
    }
}


//二叉树直径
//一棵二叉树的直径长度是任意两个结点路径长度中的最大值
import algorithm.utils.TreeNode;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.List;

/*public class TreeNode {
    public int val;
    public algorithm.utils.TreeNode left;
    public algorithm.utils.TreeNode right;
    public TreeNode(){}
    public TreeNode(int x){
        val = x;
        left = null;
        right = null;
    }
}*/

public class BinaryTreeDiameter {
    //plan1
    public int height(TreeNode root){
        if(root == null)return 0;
        int a = height(root.left);
        int b = height(root.right);

        return a > b? a+1: b+1;
    }
    //plan2
    public int sum = 0;
    //得到树的高度
    public int height1(TreeNode root){
        if(root == null)return 0;
        int a = height1(root.left);
        int b = height1(root.right);
        sum = Math.max(sum, a+b);
        return a > b? a+1: b+1;
    }
    public int dianeter(TreeNode node){
        if(node == null)return 0;
        int l = dianeter(node.left);
        int r = dianeter(node.right);
        int hl = height1(node.left);
        int hr = height1(node.right);
        return (Math.max((Math.max(l,r)),hl+hr));
    }

    @Test
    public void  Test(){
        TreeNode root = new TreeNode(1);
        TreeNode n1 = new TreeNode(2);
        TreeNode n2 = new TreeNode(3);
        TreeNode n3 = new TreeNode(4);
        TreeNode n4 = new TreeNode(5);
        root.left = n1;
        root.right = n2;
        n1.left = n3;
        n1.right = n4;
        System.out.println(dianeter(root));
    }
}
//下一个排列  给出一个数字排列按从大到小的顺序写出下一个排列。 如果已经是最大则输出最小
import java.util.Scanner;
public class NextPermutation {


    public static void main(String[] args){
        Scanner in = new Scanner(System.in);
        int num = in.nextInt();
        in.nextLine();
        int[] arr = new int[num];
        for (int i = 0; i < num; i++) {
            arr[i] = in.nextInt();
        }
        int n = -1;
        for (int i = num-1; i > 0 ; i--) {
            if (arr[i] > arr[i - 1]) {
                n = i - 1;
                break;
            }
        }
        if (n > -1){
            for (int i = num-1;i >= n; i--){
                if (arr[n] < arr[i]){
                    swap(i,n,arr);
                    break;
                }
            }
            int len = (num - n - 1)/2;
            for (int i = n + 1,j = num - 1;i <= (n+len);j--,i++){
                swap(i, j,arr);
            }
            for (int i = 0; i < num; i++) {
                System.out.print(arr[i] + " ");
            }
        }else{
            int len = num/2;
            for (int i = 0,j = num - 1; i < len;j--,i++) {
                swap(i, j,arr);
            }
            for (int i = 0; i < num; i++) {
                System.out.print(arr[i] + " ");
            }
        }

    }
    public static void swap(int i, int j, int[] num){
        int tmp = num[i];
        num[i] = num[j];
        num[j] = tmp;
    }
}
//快速排序
public class Quicksort {
    public static void quicksort(int[] arr, int begin, int end){
        if (begin < end){
            int tmp = arr[begin];
            int i = begin;
            int j = end;
            while (i < j){
                while (i < j && arr[j] > tmp)
                    j--;
                arr[i] = arr[j];
                while (i < j && arr[i] <= tmp)
                    i++;
                arr[j] = arr[i];
            }
            arr[i] = tmp;
            quicksort(arr,begin,i -1);
            quicksort(arr,i+1,end);
        }else{return;}

    }

    public static void main(String[] args) {
        int[] arr = {23,45,17,11,13,89,72,26,3,17,11,13};
        quicksort(arr,0,arr.length-1);
        for (int n: arr
             ) {
            System.out.print(n + " ");
        }
    }
}

//动态规划 矩阵最小路径
import org.junit.jupiter.api.Test;

public class MinPath {
    public  int minPath(int[][] arr, int n,int m){
        if (arr == null)
            return 0;
        int more = Math.max(n, m);
        int less = Math.min(n, m);
        boolean rowmore = (more == n);
        int[] dp = new int[less];
        dp[0] = arr[0][0];
        for (int i = 1; i < less;i++){
            dp[i] = dp[i-1]+(rowmore ? arr[0][i] : arr[i][0]);
        }
        for (int i = 1; i < more;i++){
            dp[0] = dp[0] + (rowmore ? arr[i][0] : arr[0][i]);
            for (int j = 1; j < less; j++) {
                dp[j] = Math.min(dp[j-1] ,dp[j]) + (rowmore ? arr[i][j] : arr[j][i]);
            }
        }
        return dp[less-1];
    }
    @Test
    public void Test(){
        int[][] arr = {{1,1,1,1},{2,3,5,4},{1,7,3,2},{1,3,3,4},{2,3,4,1}};
        int len = minPath(arr,5,4);
        System.out.println(len);
    }
}
//打印二叉树的左视图或者右视图
public List<Integer> rightSideView(TreeNode root) {
        Queue<TreeNode> queue = new LinkedList<>();
        List<Integer> result = new ArrayList<>();
        queue.offer(root);
        while(!queue.isEmpty()) {
            int size = queue.size();
               //对每一行操作
            while(size > 0) {
                
                TreeNode current = queue.poll();
                
                if (current.left!=null) {
                    queue.offer(current.left);
                }
                if (current.right != null) {
                    queue.offer(current.right);
                }
                
                size --;
                //表示是每一行的最后一个
                if (size == 0) {
                    result.add(current.value);
                }
                
            }
        }
        return result;
    }
